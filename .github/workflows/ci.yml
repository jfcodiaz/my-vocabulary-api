name: CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch name'
        required: true
        default: 'master'

jobs:
  lint:
    name: Lint PHPCS
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, pdo, pdo_mysql, xml, ctype, json, bcmath, xdebug

      - name: Install composer dependencies
        working-directory: ./code
        run: composer install

      - name: Create .env file
        working-directory: ./code
        run: cp .env.example .env

      - name: Generate application key
        working-directory: ./code
        run: php artisan key:generate

      - name: Run PHPCS
        working-directory: ./code
        run: vendor/bin/phpcs

  test:
    name: Test PHPUnit
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: my_vocabulary_api_TEST
          MYSQL_USER: user
          MYSQL_PASSWORD: toor
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
        volumes:
          - /var/lib/mysql

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, pdo, pdo_mysql, xml, ctype, json, bcmath, xdebug

      - name: Install composer dependencies
        working-directory: ./code
        run: composer install

      - name: Create .env file
        working-directory: ./code
        run: cp .env.example .env

      - name: Update .env for MySQL
        working-directory: ./code
        run: |
          sed -i 's/DB_HOST=db/DB_HOST=127.0.0.1/' .env
          sed -i 's/DB_USERNAME=root/DB_USERNAME=user/' .env

      - name: Generate application key
        working-directory: ./code
        run: php artisan key:generate

      - name: Run PHPUnit with coverage
        working-directory: ./code
        env:
          XDEBUG_MODE: coverage
        run: vendor/bin/phpunit --log-junit report.xml --coverage-clover coverage.xml

      - name: Upload test and coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: test-and-coverage-reports
          path: |
            ./code/report.xml
            ./code/coverage.xml

  sonarcloud:
    name: SonarCloud Scan
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download test and coverage reports
        uses: actions/download-artifact@v4
        with:
          name: test-and-coverage-reports
          path: ./code

      - name: Run SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.organization=jfcodiaz
            -Dsonar.projectKey=jfcodiaz_my-vocabulary-api
            -Dsonar.qualitygate.wait=true
            -Dsonar.junit.reportPaths=./code/report.xml
            -Dsonar.php.coverage.reportPaths=./code/coverage.xml
            -Dsonar.coverage.exclusions=**/code/config/**,**/code/tests/**,**/code/database/**,**/code/routes/**,**code/bootstrap/**
            -Dsonar.cpd.exclusions=code/database/migrations/**,code/config/**
